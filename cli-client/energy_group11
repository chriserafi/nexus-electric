#!/home/ntonasa/miniconda3/envs/TL/bin/python

import os
import sys
import requests
import argparse
from colorama import init as colorinit
from termcolor import cprint 
from pyfiglet import figlet_format

port = 8000
BASE_URL = f'http://localhost:{port}/energy/api/'
TOKEN_FILE_PATH = "/home/ntonasa/softeng19bAPI.token"

def welcome():
   colorinit(strip=not sys.stdout.isatty()) # strip colors if stdout is redirected
   cprint(figlet_format('NEXUS ELECTRIC', font='starwars'), 'blue', attrs=['bold'])
   class color:
      BOLD = '\033[1m'
      DARKCYAN = '\033[36m'
      UNDERLINE = '\033[4m'
      END = '\033[0m'

   part = '-----------------------------------------------------------'
   print(color.DARKCYAN + part+'\nWelcome to the Nexus ELectric official command line client!\n'+part+'\n' + color.END)

def get_token():
   if os.path.isfile(TOKEN_FILE_PATH):
      f = open(TOKEN_FILE_PATH, 'r')
      token = f.read()
      f.close()
      return token
   else:
      return None

def health_check(params):
   response = requests.get(BASE_URL+"HealthCheck")
   print(response.json())

def reset(params):
   response = requests.post(BASE_URL+"Reset")
   print(response.json())

def login(params):
   payload = {'username': params['username'], 'password': params['password']}
   response = requests.post(BASE_URL+"Login", data=payload)
   if response.status_code==200:
      f = open(TOKEN_FILE_PATH, "w")
      token = response.json()['token']
      f.write(token)
      f.close()
   print(response.json())

def logout(params):
   token = get_token()
   response = requests.post(BASE_URL+"Logout", headers={'X-OBSERVATORY-AUTH': token})
   if token:
      os.remove("/home/ntonasa/softeng19bAPI.token")
   print(response.status_code)

def add_user(params):
   payload = {'username': params['username'], 'password': params['password'], 'email': params['email'], 'quota': params['quota']}
   token = get_token()
   response = requests.post(BASE_URL+"Admin/users", headers={'X-OBSERVATORY-AUTH': token}, data=payload)
   print(response.json())

def check_user(params):
   token = get_token()
   response = requests.get(BASE_URL+"Admin/users/"+params['username'], headers={'X-OBSERVATORY-AUTH': token})
   print(response.json())

def actual_total_load(params):
   token = get_token()
   if params['date']:
      api_call = 'date'
   elif params['month']:
      api_call = 'month'
   elif params['year']:
      api_call = 'year'

   response = requests.get(
         BASE_URL+f"ActualTotalLoad/{params['area']}/{params['timeres']}/{api_call}/{params[api_call]}?format={params['format']}", 
         headers={'X-OBSERVATORY-AUTH': token}
      )
   if params['format'] == 'json':
      print(response.json())
   else:
      print(response.text)

def aggregated_generation_per_type(params):
   pass

def day_ahead_total_load_forecast(params):
   pass

def actual_vs_forecast(params):
   token = get_token()
   if params['date']:
      api_call = 'date'
   elif params['month']:
      api_call = 'month'
   elif params['year']:
      api_call = 'year'

   response = requests.get(
         BASE_URL+f"ActualvsForecast/{params['area']}/{params['timeres']}/{api_call}/{params[api_call]}?format={params['format']}", 
         headers={'X-OBSERVATORY-AUTH': token}
      )
   if params['format'] == 'json':
      print(response.json())
   else:
      print(response.text)

def admin(params):
   pass

def new_data(params):
   files = {'file': open('/home/ntonasa/winhome/Desktop/data2020/10daysData/ActualTotalLoad-10days.csv','rb')}
   response = requests.post(BASE_URL+"Admin/ActualTotalLoad", files=files)
   print(response.content)

# health_check({})
# login({'username': 'admin', 'password': '321nimda'})
# add_user({'username': 'ThRectifier', 'password': '987', 'email': 'rectifier@nexus.gr', 'quota': 1234})
# check_user({'username': 'ThRectifier'})
# logout({})

# payload = {'email': 'therectifier@nexus.gr'}
# response = requests.put(BASE_URL+"Admin/users/ThRectifier", headers={'X-OBSERVATORY-AUTH': token}, data=payload)
# print('\nChange email:\n', response.json())



# files = {'file': open('/home/ntonasa/winhome/Desktop/data2020/10daysData/AggregatedGenerationPerType-10days.csv','rb')}
# response = requests.post(BASE_URL+"Admin/AggregatedGenerationPerType", files=files)
# print('\nAdd AggragatedGenerationPerType-10days:\n', response.content)

# files = {'file': open('/home/ntonasa/winhome/Desktop/data2020/10daysData/DayAheadTotalLoadForecast-10days.csv','rb')}
# response = requests.post(BASE_URL+"Admin/DayAheadTotalLoadForecast", files=files)
# print('\nAdd DayAheadTotalLoadForecast-10days:\n', response.content)

# response = requests.get(BASE_URL+"ActualTotalLoad/Austria/PT15M/month/2018-01", headers={'X-OBSERVATORY-AUTH': token})
# response = requests.get(BASE_URL+"ActualTotalLoad/Austria/PT15M/year/2018", headers={'X-OBSERVATORY-AUTH': token})

# response = requests.get(BASE_URL+"AggregatedGenerationPerType/Austria/PT15M/date/2018-01-01", headers={'X-OBSERVATORY-AUTH': token})
# response = requests.get(BASE_URL+"AggregatedGenerationPerType/Austria/PT15M/month/2018-01", headers={'X-OBSERVATORY-AUTH': token})
# response = requests.get(BASE_URL+"AggregatedGenerationPerType/Austria/PT15M/year/2018", headers={'X-OBSERVATORY-AUTH': token})

# response = requests.get(BASE_URL+"DayAheadTotalLoadForecast/Austria/PT15M/date/2018-01-01", headers={'X-OBSERVATORY-AUTH': token})
# response = requests.get(BASE_URL+"DayAheadTotalLoadForecast/Austria/PT15M/month/2018-01", headers={'X-OBSERVATORY-AUTH': token})
# response = requests.get(BASE_URL+"DayAheadTotalLoadForecast/Austria/PT15M/year/2018", headers={'X-OBSERVATORY-AUTH': token})

# response = requests.get(BASE_URL+"ActualvsForecast/Austria/PT15M/date/2018-01-01", headers={'X-OBSERVATORY-AUTH': token})
# response = requests.get(BASE_URL+"ActualvsForecast/Austria/PT15M/month/2018-01", headers={'X-OBSERVATORY-AUTH': token})
# response = requests.get(BASE_URL+"ActualvsForecast/Austria/PT15M/year/2018", headers={'X-OBSERVATORY-AUTH': token})
if __name__ == '__main__':
   welcome()
   main_parser = argparse.ArgumentParser(
      prog='energy_group11',
      description="NexusElectric API CLI client",
      #usage='%(prog)s SCOPE [--param1 value1 --param2 value2]'
   )
   scope_subparsers = main_parser.add_subparsers(
      title="SCOPE",
      #dest="scope", 
      metavar=""
   )

   # Health Check Parser
   health_check_subparser = scope_subparsers.add_parser('HealthCheck', help="check database connectivity")
   health_check_subparser.set_defaults(func=health_check)

   # Reset Parser
   reset_subparser = scope_subparsers.add_parser('Reset', help="reset database")
   reset_subparser.set_defaults(func=reset)

   # Login Parser
   login_subparser = scope_subparsers.add_parser('Login', help="authenticate user using credentials and obtain token")
   login_subparser.add_argument('--username', metavar="username", required=True)
   login_subparser.add_argument('--password', metavar="password", required=True)
   login_subparser.set_defaults(func=login)

   # Logout Parser
   logout_subparser = scope_subparsers.add_parser('Logout', help="remove authentication token")
   logout_subparser.set_defaults(func=logout)

   # Dataset Arguments & Parsers
   dataset_parser = argparse.ArgumentParser(add_help=False)
   dataset_parser.add_argument('--area', metavar="area_name", required=True)
   dataset_parser.add_argument('--timeres', choices=['PT15M', 'PT30M', 'PT60M'], required=True, help="resolution type description")
   dataset_parser_mutualexcl_group = dataset_parser.add_mutually_exclusive_group(required=True)
   dataset_parser_mutualexcl_group.add_argument('--date', metavar="YYYY-MM-DD", help="date in YYYY-MM-DD format to filter dataset")
   dataset_parser_mutualexcl_group.add_argument('--month', metavar="YYYY-MM", help="date in YYYY-MM format to filter dataset")
   dataset_parser_mutualexcl_group.add_argument('--year', metavar="YYYY", help="date in YYYY format to filter dataset")
   dataset_parser.add_argument('--format', metavar="type", choices=['json', 'csv'], default="json")

   actual_total_load_parser = scope_subparsers.add_parser('ActualTotalLoad', parents=[dataset_parser], help="query ActualTotalLoad dataset")
   actual_total_load_parser.set_defaults(func=actual_total_load)

   aggregated_generation_parser = scope_subparsers.add_parser('AggregatedGenerationPerType', parents=[dataset_parser], help="query AggregatedGenerationPerType dataset")
   aggregated_generation_parser.set_defaults(func=aggregated_generation_per_type)

   day_ahead_forecast_parser = scope_subparsers.add_parser('DayAheadTotalLoadForecast', parents=[dataset_parser], help="query DayAheadTotalLoadForecast dataset")
   day_ahead_forecast_parser.add_argument('--prodtype', metavar="production_type", required=True, help="production type description")
   day_ahead_forecast_parser.set_defaults(func=day_ahead_total_load_forecast)

   actual_vs_forecast_parser = scope_subparsers.add_parser('ActualvsForecast', parents=[dataset_parser], help="query ActualvsForecast dataset")
   actual_vs_forecast_parser.set_defaults(func=actual_vs_forecast)

   # Admin Parser
   admin_dataset_parser = argparse.ArgumentParser(add_help=False)
   admin_subparsers = admin_dataset_parser.add_subparsers()

   a = admin_subparsers.add_parser('newuser')
   a.add_argument('--newuser', metavar="username", required=True)
   a.add_argument('--passwd', metavar="password", required=True)
   a.add_argument('--email', metavar="email", required=True)
   a.add_argument('--quota', type=int, metavar="quota", required=True)

   b = admin_subparsers.add_parser('modeuser')
   b.add_argument('--moduser', metavar="username", required=True)
   b.add_argument('--passwd', metavar="password", required=True)
   b.add_argument('--email', metavar="email", required=True)
   b.add_argument('--quota', type=int, metavar="quota", required=True)

   c = admin_subparsers.add_parser('userstatus')
   c.add_argument('--userstatus', metavar="username")

   d = admin_subparsers.add_parser('newdata')
   d.add_argument('--newdata', metavar="username", choices=['ActualTotalLoad', 'AggregatedGenerationPerType', 'DayAheadTotalLoadForecast'], required=True)
   d.add_argument('--source', type=argparse.FileType('r', encoding='UTF-8'), metavar="filename", required=True)

   admin_subparser = scope_subparsers.add_parser('Admin', parents=[admin_dataset_parser], help="application & user administration")
   admin_subparser.set_defaults(func=admin)

   args = main_parser.parse_args()
   params = vars(args)
   if 'func' in params:
      args.func(params)